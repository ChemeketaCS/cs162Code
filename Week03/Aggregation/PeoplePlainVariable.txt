//-------------------------------------------
//"Sharing" with plain variables
//-------------------------------------------

#include <iostream>
#include <string>

using namespace std;


//Person class has nothing special other than cout's in constructors
class Person {
public:
	Person() {
		age = 0;
		name = "?";
		cout << "---Making a nameless person" << endl;
	}
	Person(string nameValue, int ageValue) {
		age = ageValue;
		name = nameValue;
		cout << "---Making a person " << name << endl;
	}

	void print() { cout << name << " who is " << age << endl; }
	string getName() { return name; }
	void setName(string val) { name = val; }
private:
	string name;
	int age;
};


//A child has Person objects it contains to represent father and mother
//  These will be memory contained inside the Child that contain
//  all the information about a Person
class Child {
private:
	Person father;
	Person mother;
	string name;
	int age;

public:
	Child(string nameValue, int ageValue) {
		age = ageValue;
		name = nameValue;
	}

	void print() {
		cout << name << " who is " << age << endl;
		cout << "     child of " << father.getName()
			 << " and " << mother.getName() << endl;
	}

	string getName() { return name; }

	//These return a NEW person who is a copy of father/mother
	Person getFather() { return father; }
	Person getMother() { return mother; }
	//These take a reference to a Person and copy that into father or mother
	void setFather(const Person& p) { father = p; }
	void setMother(const Person& p) { mother = p; }
};


int main()
{
	cout << "Setting up family... " << endl;
	cout << "Making father Bob who is 53" << endl;
	Person dad("Bob", 53);
	cout << "Making mother Candace" << endl;
	Person mom("Candace", 54);
	cout << "Making child Ernie" << endl;
	Child ernie("Ernie", 18);
	cout << "Making child Sue" << endl;
	Child sue("Sue", 16);

	ernie.setFather(dad);
	ernie.setMother(mom);
	sue.setFather(dad);
	sue.setMother(mom);

	cout << "Changing dad's name... " << endl;
	dad.setName("Sam");
	dad.print();

	cout << "Print Ernie and Sue:" << endl;
	ernie.print();
	sue.print();

	return 0;
}
